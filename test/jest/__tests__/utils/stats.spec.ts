import { describe, expect, it } from '@jest/globals';
import {
  CronbachAlpha,
  ShapiroWilkW,
} from '../../../../src/utils/stats';

describe('stats utils', () => {
  describe('cronbachAlpha', () => {
    it('produce the right values', () => {
      expect(
        CronbachAlpha([
          [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1],
          [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0],
          [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
        ])
      ).toEqual(0.36764705882352927);

      expect(
        CronbachAlpha([
          [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1],
          [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0],
          [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
          [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
          [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
          [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
          [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0],
          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
          [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1],
        ])
      ).toEqual(0.27562446167097354);
    });
  });

  describe('ShapiroWilkTest', () => {
    it('produce the right values <50', () => {
      const res = ShapiroWilkW([1, 1.3, 0.7, 1.2, 0.9, 1.1]);
      expect(res?.w).toEqual(0.9825867831928737);
      expect(res?.pvalue).toEqual(0.9636699100359503);
    });

    it('produce the right values >50', () => {
      const res = ShapiroWilkW([
        23, 28, 24, 27, 18, 22, 29, 26, 22, 28, 28, 21, 24, 25, 22, 26, 19, 23,
        30, 23, 22, 26, 18, 15, 19, 21, 25, 19, 20, 19, 21, 27, 12, 19, 32, 21,
        26, 26, 19, 21, 24, 24, 23, 32, 20, 25, 19, 22, 24, 22, 33, 20, 19, 26,
        18, 25, 23, 23, 31, 32, 14, 11, 16, 21, 8, 27, 32, 19, 25, 22, 15, 28,
        23, 18, 18, 28, 21, 20, 31, 25, 25, 27, 29, 24, 23, 23, 18, 24, 26, 22,
        25, 17, 18, 20, 21, 25, 23, 23, 27, 18, 25, 18, 21, 23, 21, 23, 25, 26,
        26, 24, 27, 17, 22, 19, 17, 24, 25, 21, 25, 23, 22, 27, 32, 25, 29, 17,
        28, 20, 23, 23, 24, 26, 18, 22, 23, 25, 21, 24, 18, 19, 21, 16, 31, 21,
        23, 15, 19, 34, 23, 30, 24, 24, 18, 27, 25, 17, 11, 21, 21, 17, 30, 16,
        24, 25, 22, 17, 31, 21, 6, 24, 25, 23, 25, 22, 19, 21, 25, 18, 24, 25,
        25, 20, 21, 31, 25, 20, 20, 21, 18, 19, 27, 28, 23, 25, 16, 27, 24, 18,
        14, 30, 20, 21, 25, 22, 28, 28, 25, 26, 29, 25, 19, 20, 22, 20, 23, 30,
        22, 26, 18, 22, 26, 16, 31, 22, 18, 14, 23, 18, 20, 13, 23, 27, 24, 26,
        31, 25, 16, 22, 21, 30, 27, 27, 19, 27, 18, 29, 20, 26, 29, 24, 14, 14,
        22, 28, 21, 25, 21, 25, 21, 20, 16, 28, 24, 28, 22, 20, 22, 25, 24, 20,
        28, 20, 24, 27, 21, 23, 25, 14, 23, 28, 26, 23, 19, 20, 21, 28, 23, 22,
        27, 34, 29, 18, 30, 23, 16, 26, 13, 26, 26, 22, 29, 25, 22, 21, 17, 22,
        17, 28, 30, 27, 29, 26, 28, 23, 28, 21, 24, 14, 20, 21, 22, 26, 16, 24,
        22, 24, 22, 23, 30, 21, 21, 20, 26, 26, 17, 19, 17, 25, 22, 25, 21, 21,
        13, 25, 25, 18, 23, 27, 21, 27, 27, 27, 26, 19, 32, 26,
      ]);
      expect([res?.w, res?.pvalue, res?.median])
      .toEqual([0.9901321347908539, 0.017061596705564952, 23]);
    });
  });
});
